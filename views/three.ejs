<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/d3-scale-radial.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>


<style>
    .header{
        padding: 10px;
        background: #1abc9c;
        color: white;

    }
    .title{
        font-size: 32px;
        padding: 15px;
        color:white;
    }

    .titleTwo{
        font-size: 32px;
        padding: 15px;
        color:white;
        position:absolute;
        left:600px;
        top:20px;
    }

    .button {
        display: inline-block;
        border-radius: 4px;
        background-color: #1abc9c;
        border: none;
        color: #FFFFFF;
        text-align: center;
        font-size: 24px;
        padding: 20px;
        width: 300px;
        transition: all 0.5s;
        cursor: pointer;
        margin: 5px;
    }

    .button:hover{
        background-color: #3e8e41;
        opacity: 1;
    }

    .button:active{
        background-color: #3e8e41;
        box-shadow: 0 5px #666;
        transform: translateY(4px);
    }

    .button span {
        cursor: pointer;
        display: inline-block;
        position: relative;
        transition: 0.5s;
    }

    .button span:after {
        content: '\00bb';
        position: absolute;
        opacity: 0;
        top: 0;
        right: -20px;
        transition: 0.5s;
    }

    .button:hover span {
        padding-right: 25px;
    }

    .button:hover span:after {
        opacity: 1;
        right: 0;
    }

    .col-3{
        width: 20%;
        height: 100%;
    }

    .col-9{

        width: 80%;
        height: 100%;
    }
    .first{
        border-right: 2px solid #f4511e;

    }

    .second{
        border-left: 2px solid #f4511e;
    }

    .item{
        font-size: 24px;
        color: #4cd4b0;
        padding: 15px;
    }

    /* Intersection */

    div#qtr1_div{
        width: 50%;
        float: left;
        position: absolute;
        left: 221px;
        top: 108px;
    }
    .toolTip {
        position: absolute;
        display: none;
        width: auto;
        height: auto;
        background: none repeat scroll 0 0 white;
        border: 0 none;
        border-radius: 8px 8px 8px 8px;
        box-shadow: -3px 3px 15px #888888;
        color: black;
        font: 12px sans-serif;
        padding: 5px;
        text-align: center;
    }
    .toolTips {

    }
    .demolegend {
        position: absolute;
        left: 20px;
        top: 30px;
    }
    .axis text {
        font: 10px sans-serif;
    }

    .axis line, .axis path {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }
</style>

<div class="header">
    <h1 class="title text-center"> Dataset</h1>
    <h1 class="titleTwo text-center"; style= ""> Visualization</h1>
</div>
<div class="container">
    <div class="col-3 first">
        <div class="item">
            <form action="/one" method = "GET">
                <button class="button" style="vertical-align:middle"><span>April 2019 - June 2019</span></button>
            </form>
        </div>
        <div class="item">
            <form action="/two" method = "GET">
                <button class="button" style="vertical-align:middle"><span>July 2019 - September 2019</span></button>
            </form>
        </div>
        <div class="item">
            <form action="/three" method = "GET">
                <button class="button" style="vertical-align:middle"><span>October 2019 - December 2019</span></button>
            </form>
        </div>
        <div class="item">
            <form action="/four" method = "GET">
                <button class="button" style="vertical-align:middle"><span>January 2020 - March 2020</span></button>
            </form>
        </div>
        <div class="item">
            <form action="/extra" method = "GET">
                <button class="button" style="vertical-align:middle"><span>Trend View</span></button>
            </form>
        </div>

    </div>

    <div class="col-9 second">
        <!-- Create a div where the graph will take place -->
        <div id = "d3_categories"; style= "position:absolute; left:400px; top:175px;"></div>
        <div id="qtr1_div"; style= "position:absolute; left:550px; top:155px;">
            <button onclick="update(pageView)">Page Views</button>
            <button onclick="update(bounceRate)">Bounce Rate Percentage</button>
            <button onclick="update(pageValue)">Page value</button>
        </div>

        <div style = "position:absolute; left:1250px; top:155px; height:420px;">Searching Methods</div>
        <div id = "d3_tree"; style = "position:absolute; left:950px; top:175px; height:420px;"></div>
        <div style = "position:absolute; left:650px; top:750px; height:420px;">Devices</div>
        <div id="d3_devices"; style =" position:absolute; left:450px; top:800px;"></div>
        <div id = "d3_demographic"; style = "position:absolute; left:950px; top:800px; height:420px;"></div>
        <div  style = "position:absolute; left:950px; top:750px; height:420px;">
            Y-Axis:
            <select id="dropDownId2">
                <option value="1"> Third Quarter 2019</option>
            </select>
        </div>
        <!--<div id="d3_dev"; style =" position:absolute; left:700px; top:600px;"></div> -->
        <!-- <div id="d3-two"; style =" position:absolute; left:1250px; top:600px;"> </div> -->
        <!--<div style = "position:absolute; left:345px; top:650px; height:420px;">Devices</div>
        <div id="d3_devices"; style =" position:absolute; left:150px; top:668px;"></div> -->
    </div>
</div>
<!-- Intersection -->
<!--
<form action="/one" method = "GET">
    <button
            style =" border-width: 12px;
    position:absolute; left:80px; top:20px;
    border-style: solid;
    width: 220px;
    cursor:pointer;"
    >April 2019 - June 2019</button>
</form>

<form action="/two" method = "GET">
    <button
            style =" border-width: 12px;
    position:absolute; left:320px; top:20px;
    border-style: solid;
    width: 220px;
    cursor:pointer;"
    >July 2019 - September 2019</button>
</form>

<form action="/three" method = "GET">

    <button
            style =" border-width: 12px;
    position:absolute; left:560px; top:20px;
    border-style: solid;
    width: 220px;
    cursor:pointer;"
    >October 2019 - December 2019</button>
</form>

<form action="/four" method = "GET">

    <button
            style =" border-width: 12px;
    position:absolute; left:800px; top:20px;
    border-style: solid;
    width: 220px;
    cursor:pointer;"
    >January 2020 - March 2020</button>
</form>

<form action="/extra" method = "GET">
    <button
            style =" border-width: 12px;
    position:absolute; left:1040px; top:20px;
    border-style: solid;
    width: 220px;
    cursor:pointer;"
    >Trend View</button>
</form>

Create a div where the graph will take place
<div id = "d3_categories"; style= "position:absolute; left:10px; top:125px;"></div>
<div id="qtr1_div">
    <button onclick="update(pageView)">Page Views</button>
    <button onclick="update(bounceRate)">Bounce Rate Percentage</button>
    <button onclick="update(pageValue)">Page value</button>
</div>
</div>

<div style = "position:absolute; left:1050px; top:110px; height:420px;">Searching Methods</div>
<div id = "d3_tree"; style = "position:absolute; left:750px; top:100px; height:420px;"></div>
<div style = "position:absolute; left:345px; top:650px; height:420px;">Devices</div>
<div id="d3_devices"; style =" position:absolute; left:150px; top:668px;"></div>
<div id = "d3_demographic"; style = "position:absolute; left:750px; top:650px; height:420px;"></div>
<div  style = "position:absolute; left:750px; top:650px; height:420px;">
    Y-Axis:
    <select id="dropDownId2">
        <option value="1"> Fourth Quarter 2020</option>
    </select>
</div>
-->

<!-- Categories D3 Categories Logic -->
<script>
    var pview = "Page Views";
    var brate = "Bounce Rate";
    var pvalue = "Page Value";

    var pageView = [<% for(var i = 0; i < 10; i++) { %>

        {page: "<%- msg[i].Page %>", value:<%= msg[i].Pageviews %>},
        <% } %>];

    var bounceRate = [<% for(var i = 0; i < 10; i++) { %>

        {page: "<%- msg[i].Page %>", value:<%= msg[i].Bounce_Rate_Percentage %>},
        <% } %>];

    var pageValue = [<% for(var i = 0; i < 10; i++) { %>

        {page: "<%- msg[i].Page %>", value:<%= msg[i].Page_Value %>},
        <% } %>];

    var div = d3.select("#d3_categories").append("div").attr("class", "toolTip");
    // set the dimensions and margins of the graph
    var margin = {top: 30, right: 30, bottom: 70, left: 60},
        width = 700 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var color = ["#FFA500", "#008000", "#DC143C", "#0000FF", "	#D2691E", "#8B008B", "#7FFFD4", "#778899", "#20B2AA", "#FFD700"]
    // append the svg object to the body of the page
    var svg = d3.select("#d3_categories")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // Initialize the X axis
    var x = d3.scaleBand()
        .range([0, width])
        .padding(0.2);


    // Initialize the Y axis
    var y = d3.scaleLinear()
        .range([height, 0]);
    var yAxis = svg.append("g")
        .attr("class", "myYaxis")

    // A function that create / update the plot for a given variable:
    function update(data) {

        x.domain(data.map(function (d) {
            return d.page;
        }))


// Update the Y axis
        y.domain([0, d3.max(data, function (d) {
            return d.value
        })]);
        yAxis.transition().duration(1000).call(d3.axisLeft(y));


// Create the u variable
        var u = svg.selectAll("rect")
            .data(data)

        u
            .enter()
            .append("rect") // Add a new rect for each new elements
            .merge(u) // get the already existing elements as well
            .transition() // and apply changes to all of them
            .duration(1000)
            .attr("x", function (d) {
                return x(d.page);
            })
            .attr("y", function (d) {
                return y(d.value);
            })
            .attr("width", x.bandwidth())
            .attr("height", function (d) {
                return height - y(d.value);
            })
            .attr("fill", function (d, i) {
                return color[i % 10];
            });

        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + 400 + ")")
            .call(d3.axisBottom(x).ticks(10))
            .selectAll("text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("transform", "rotate(-65)");

        svg.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left)
            .attr("x", 0 - (height / 2))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("values");
        u
            .on("mousemove", function (d) {
                div.style("left", d3.event.pageX + 10 + "px");
                div.style("top", d3.event.pageY - 25 + "px");
                div.style("display", "inline-block");
                div.html("category : " + (d.page) + "<br>" + "value is " + (d.value));
            });

        u
            .on("mouseout", function (d) {
                div.style("display", "none");
            });
// If less group in the new dataset, I delete the ones not in use anymore
        u
            .exit()
            .remove()
    }

    // Initialize the plot with the first dataset
    update(pageView);

</script>

<!-- Circular BarPlot D3 Logic -->
<script>

    var cir_data=[<% for(var i=10; i < 17; i++) { %>

        {Country : "<%= msg[i].Channel_Group %>", Value:<%= msg[i].Transactions %>},
        <% } %>];

    // set the dimensions and margins of the graph
    var circmargin = {top: 30, right: 30, bottom: 70, left: 60},
        circwidth = 700 - circmargin.left - circmargin.right,
        circheight = 400 - circmargin.top - circmargin.bottom,
        innerRadius = 90,
        outerRadius = Math.min(circwidth, circheight) / 2;   // the outerRadius goes from the middle of the SVG area to the border

    // append the svg object
    var circsvg = d3.select("#d3_tree")
        .append("svg")
        .attr("width", circwidth + circmargin.left + circmargin.right)
        .attr("height", circheight + circmargin.top + circmargin.bottom)
        .append("g")
        .attr("transform", "translate(" + (circwidth / 2 + circmargin.left) + "," + (circheight / 2 + circmargin.top) + ")");

    var tips = d3.select("#d3_tree").append("div").attr("class", "tooltip");

    // X scale: common for 2 data series
    var circx = d3.scaleBand()
        .range([0, 2 * Math.PI])    // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle
        .align(0)                  // This does nothing
        .domain(cir_data.map(function(d) { return d.Country; })); // The domain of the X axis is the list of states.

    // Y scale outer variable
    var circy = d3.scaleRadial()
        .range([innerRadius, outerRadius])   // Domain will be define later.
        .domain([0, 10000]); // Domain of Y is from 0 to the max seen in the data

    // Second barplot Scales
    var ybis = d3.scaleRadial()
        .range([innerRadius, 5])   // Domain will be defined later.
        .domain([0, 10000]);

    // Add the bars
    circsvg.append("g")
        .selectAll("path")
        .data(cir_data)
        .enter()
        .append("path")
        .attr("fill", "blue")
        .attr("class", "yo")
        .attr("d", d3.arc()     // imagine your doing a part of a donut plot
            .innerRadius(innerRadius)
            .outerRadius(function(d) { return circy(d['Value']); })
            .startAngle(function(d) { return circx(d.Country); })
            .endAngle(function(d) { return circx(d.Country) + circx.bandwidth(); })
            .padAngle(0.05)
            .padRadius(innerRadius))
        .on("mouseover", function(d) {
            d3.select(this).style("fill", "yellow");
        })
        .on("mouseout", function(d) {
            d3.select(this).style("fill", "blue");
        })
        .on("mousemove", function(d){
            div.style("left", d3.event.pageX+10+"px");
            div.style("top", d3.event.pageY-25+"px");
            div.style("display", "inline-block");
            div.html("Transactions  " + d['Value']);
        });

    // Add the labels
    circsvg.append("g")
        .selectAll("g")
        .data(cir_data)
        .enter()
        .append("g")
        .attr("text-anchor", function(d) { return (circx(d.Country) + circx.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start"; })
        .attr("transform", function(d) { return "rotate(" + ((circx(d.Country) + circx.bandwidth() / 2) * 180 / Math.PI - 90) + ")"+"translate(" + (circy(d['Value'])+10) + ",0)"; })
        .append("text")
        .text(function(d){return(d.Country)})
        .attr("transform", function(d) { return (circx(d.Country) + circx.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" : "rotate(0)"; })
        .style("font-size", "11px")
        .attr("alignment-baseline", "middle")

    // Add the second series
    circsvg.append("g")
        .selectAll("path")
        .data(cir_data)
        .enter()
        .append("path")
        .attr("fill", "red")
        .attr("d", d3.arc()
            .innerRadius( function(d) { return ybis(0) })
            .outerRadius( function(d) { return ybis(d['Value']); })
            .startAngle(function(d) { return circx(d.Country); })
            .endAngle(function(d) { return circx(d.Country) + circx.bandwidth(); })
            .padAngle(0.01)
            .padRadius(innerRadius));
</script>

<!-- Pie D3 Logic -->
<script>

    var pie_data=[<% for(var i=17; i < 20; i++) { %>

        {device : "<%= msg[i].Device_Category %>", value:<%= msg[i].Transactions %>},
        <% } %>];

    var pieWidth = 450;
    var pieHeight = 450;

    var piesvg = d3.select("#d3_devices")
        .append("svg")
        .attr("width", pieWidth )
        .attr("height", pieHeight )
        .append("g")
        .attr("transform", "translate(" + pieWidth / 2 + "," + pieHeight / 2 + ")");
    var radius = Math.min(pieWidth, pieHeight) / 2


    var pcolor = d3.scaleOrdinal(['yellow','red','blue']);

    // Generate the pie
    var pie = d3.pie().value(function(d) {return d.value;});

    // Generate the arcs
    var piepath = d3.arc().innerRadius(5).outerRadius(radius - 10);

    var plabel = d3.arc()
        .outerRadius(radius)
        .innerRadius(radius - 220);


    var arc = piesvg.selectAll(".arc")
        .data(pie(pie_data))
        .enter().append("g")
        .attr("class", "arc");

    arc.append("path")
        .attr("fill", function(d, i) { return pcolor(d.data.device); })
        .attr("d", piepath);

    arc.append("text")
        .attr("transform", function(d) {
            return "translate(" + plabel.centroid(d) + ")";
        })
        .call(text => text.append("tspan")
            .attr("y", "-0.4em")
            .attr("font-weight", "bold")
            .text(d => d.data.device))
        .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append("tspan")
            .attr("x", 0)
            .attr("y", "0.7em")
            .attr("fill-opacity", 0.7)
            .text(d => d.data.value));
</script>

<script>


    var demodata = [<% for(var i = 20; i < 26; i++) { %>

        {Age: "<%- msg[i].Age %>", Revenue: "<%- msg[i].Revenue %>", Sessions: "<%- msg[i].Sessions %>"
            , qrt: "<%- msg[i].qrt %>", Quarter: "<%- msg[i].Quarter %>"},
        <% } %>];

    var demomargin = {top: 30, right: 30, bottom: 70, left: 60},
        demowidth = 700 - demomargin.left - demomargin.right,
        demoheight = 400 - demomargin.top - demomargin.bottom;


    draw(demodata);

    function draw(data1) {

        // append the svg object to the body of the page
        var demosvg = d3.select("#d3_demographic")
            .append("svg")
            .attr("width", demowidth + demomargin.left + demomargin.right)
            .attr("height", demoheight + demomargin.top + demomargin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + demomargin.left + "," + demomargin.top + ")");


        var demosubgroups = ["Revenue","Sessions"];//data.columns.slice(1);
        //alert(subgroups);
        //console.log(newData);

        // List of groups = species here = value of the first column called group -> I show them on the X axis
        var demogroups = d3.map(demodata, function (demo) {
            return (demo.Age)
        }).keys()

        // Add X axis
        var demox = d3.scaleBand()
            .domain(demogroups)
            .range([0, demowidth])
            .padding([0.2])
        demosvg.append("g")
            .attr("transform", "translate(0," + demoheight + ")")
            .call(d3.axisBottom(demox).tickSize(0));

        // Add Y axis
        var demoy = d3.scaleLinear()
            .domain([100000, 1000000])
            .range([demoheight, 0]);
        demosvg.append("g")
            .call(d3.axisLeft(demoy));

        // Another scale for subgroup position?
        var demoxSubgroup = d3.scaleBand()
            .domain(demosubgroups)
            .range([0, demox.bandwidth()])
            .padding([0.05]);

        // color palette = one color per subgroup
        var democolor = d3.scaleOrdinal()
            .domain(demosubgroups)
            .range(['#e41a1c', '#377eb8', '#4daf4a']);

        // Show the bars
        demosvg.append("g")
            .selectAll("g")
            // Enter in data = loop group per group
            .data(data1)
            .enter()
            .append("g")
            .attr("transform", function (demo) {
                return "translate(" + demox(demo.Age) + ",0)";
            })
            .selectAll("rect")
            .data(function (demo) {
                return demosubgroups.map(function (key) {
                    return {key: key, value: demo[key]};
                });
            })
            .enter().append("rect")
            .attr("x", function (demo) {
                return demoxSubgroup(demo.key);
            })
            .attr("y", function (demo) {
                return demoy(demo.value);
            })
            .attr("width", demoxSubgroup.bandwidth())
            .attr("height", function (demo) {
                return demoheight - demoy(demo.value);
            })
            .attr("fill", function (demo) {
                return democolor(demo.key);
            });

        demosvg.append("text")
            .attr("x", 250)
            .attr("y", 345)
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .style("font-size", "15px")
            .text("Age");

        demosvg.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", -100)
            .attr("x", 0 - (demoheight / 2))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .style("font-size", "15px")
            .text("values");

        //Legend
        var demolegend = demosvg.selectAll(".demolegend")
            .data(demosubgroups)
            .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function(d,i) { return "translate(0," + i * 20 + ")"; })
            .style("opacity","0");

        demolegend.append("rect")
            .attr("x", demowidth - 18)
            .attr("width", 18)
            .attr("height", 18)
            .style("fill", function(demo) { return democolor(demo); });

        demolegend.append("text")
            .attr("x", demowidth - 24)
            .attr("y", 9)
            .attr("dy", ".35em")
            .style("text-anchor", "end")
            .text(function(demo) {return demo; });

        demolegend.transition().duration(500).delay(function(d,i){ return 1300 + 100 * i; }).style("opacity","1");
    }


    function updateQrt(selectedVal ){
        var data2;
        if(selectedVal =="1"){
            data2 = [<% for(var i = 20; i < 26; i++) {%>
                {Age: "<%- msg[i].Age %>", Revenue: "<%- msg[i].Revenue %>", Sessions: "<%- msg[i].Sessions %>"
                    , qrt: "<%- msg[i].qrt %>", Quarter: "<%- msg[i].Quarter %>"},
                <%}%>
            ];
        }

        //alert(data2);
        draw(data2);
    }

</script>
